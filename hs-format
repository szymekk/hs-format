#!/bin/bash

usage () {
cat <<EOF
usage: $0 ([--check] | [--force]) [--print-modified] [--with-ormolu PATH]
Run ormolu, a Haskell source formatter, on Haskell files in a git repository,
respecting .gitignore rules.

  --check             display files that need formatting
  --force             format all files, even those already formatted
  --print-modified    print modified files
  --with-ormolu PATH  use ormolu found at PATH
  --help              display this help and exit
EOF
}

die () {
    return_code=$1
    shift
    [[ $# -ne 0 ]] && echo "$0": "$*"
    exit "$return_code"
}

die_with_usage () {
    return_code=$1
    shift
    [[ $# -ne 0 ]] && echo "$0": "$*"
    usage
    exit "$return_code"
}

check_only=
force=
print_modified=
custom_ormolu_path=

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    --help)
    usage
    exit
    ;;
    --check)
    check_only=1
    shift
    ;;
    --force)
    force=1
    shift
    ;;
    --print-modified)
    print_modified=1
    shift
    ;;
    --with-ormolu)
    if [[ $# -lt 2 ]] ; then
        die 1 "The option '--with-ormolu' expects an argument."
    fi
    custom_ormolu_path=$2
    shift 2
    ;;
    --with-ormolu=*)
    custom_ormolu_path=${1#*=}
    if [[ -z "$custom_ormolu_path" ]] ; then
        die 1 "The option '--with-ormolu' expects an argument."
    fi
    shift
    ;;
    *)
    die_with_usage 2 "unknown option: '$1'"
    ;;
esac
done

is_available () {
    type "$1" >/dev/null 2>&1
}

ormolu_executable=ormolu

if [[ -n "$custom_ormolu_path" ]]; then
    if ! is_available "$custom_ormolu_path" ; then
        die 3 "Did not find ormolu at specified path: $custom_ormolu_path"
    fi
    ormolu_executable="$custom_ormolu_path"
fi

if ! is_available "$ormolu_executable" ; then
    die 4 "Did not find ormolu."
fi

if [[ -n $check_only && -n $force ]]; then
    die_with_usage 5 "'--check' cannot be used with '--force'"
fi

run_ormolu () {
    files=("$@")
    if [ ${#files[@]} -eq 0 ]; then
        return
    fi

    printf '%s\0' "${files[@]}" |
    xargs -0 "$ormolu_executable" --mode=inplace
}

print_files_with_prefix_and_suffix () {
    prefix=$1
    suffix=$2
    shift 2
    files=("$@")
    for file in "${files[@]}"; do
        echo "$prefix""$file""$suffix"
    done
}

print_files_to_be_modified () {
    print_files_with_prefix_and_suffix "applying formatting: '" \' "$@"
}

print_files_unformatted () {
    print_files_with_prefix_and_suffix "needs formatting: '" \' "$@"
}

extensions=(hs lhs)
git_flags=(--cached --others --exclude-standard)
patterns=( "${extensions[@]/#/*.}" )

get_source_files () {
    git ls-files -z "${git_flags[@]}" "${patterns[@]}"
}

readarray -d $'\0' source_files < <( get_source_files )
declare -a unformatted_files

if [[ -z $force ]]; then
    for file in "${source_files[@]}"; do
        if ! "$ormolu_executable" --mode=check "$file" ; then
            unformatted_files+=("$file")
        fi
    done
fi

if [[ -n $check_only ]]; then
    print_files_unformatted "${unformatted_files[@]}"
    exit
fi

if [[ -n $force ]]; then
    if [[ -n $print_modified ]]; then
        print_files_to_be_modified "${source_files[@]}"
    fi

    run_ormolu "${source_files[@]}"
    exit
fi

if [[ -n $print_modified ]]; then
    print_files_to_be_modified "${unformatted_files[@]}"
fi

run_ormolu "${unformatted_files[@]}"
