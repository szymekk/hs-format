#!/bin/bash

usage () {
echo usage: "$0" "[--check | --force]"
echo Run ormolu formatter on Haskell files in a git repository, respecting
echo .gitignore rules.
echo
echo "  " "--check  display files that need formatting"
echo "  " "--force  format all files, even those already formatted"
echo "  " "--help   display this help and exit"
}

check_only=
force=

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    --help)
    usage
    exit
    ;;
    --check)
    check_only=1
    shift
    ;;
    --force)
    force=1
    shift
    ;;
    *)
    echo "$0": unknown option: "$1"
    usage
    exit
    ;;
esac
done

if [[ -n $check_only && -n $force ]]; then
    echo "$0": --check cannot be used with --force
    usage
    exit
fi

run_ormolu () {
    files=("$@")
    if [ ${#files[@]} -eq 0 ]; then
        return
    fi

    printf '%s\0' "${files[@]}" |
    xargs -0 ormolu --mode=inplace
}

extensions=(hs lhs)
git_flags=(--cached --others --exclude-standard)
patterns=( "${extensions[@]/#/*.}" )

get_source_files () {
    git ls-files -z "${git_flags[@]}" "${patterns[@]}"
}

readarray -d $'\0' source_files < <( get_source_files )
declare -a unformatted_files

if [[ -z $force ]]; then
    for file in "${source_files[@]}"; do
        if ! ormolu --mode=check "$file" ; then
            unformatted_files+=("$file")
        fi
    done
fi

if [[ -n $check_only ]]; then
    for file in "${unformatted_files[@]}"; do
        echo \""$file"\" needs formatting
    done
    exit
fi

if [[ -n $force ]]; then
    run_ormolu "${source_files[@]}"
    exit
fi

run_ormolu "${unformatted_files[@]}"
